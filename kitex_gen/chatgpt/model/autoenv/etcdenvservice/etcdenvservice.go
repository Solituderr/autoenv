// Code generated by Kitex v0.10.3. DO NOT EDIT.

package etcdenvservice

import (
	"context"
	"errors"
	autoenv "github.com/Solituderr/autoenv/kitex_gen/chatgpt/model/autoenv"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetEtcdEnv": kitex.NewMethodInfo(
		getEtcdEnvHandler,
		newEtcdEnvServiceGetEtcdEnvArgs,
		newEtcdEnvServiceGetEtcdEnvResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetEtcdEnv": kitex.NewMethodInfo(
		setEtcdEnvHandler,
		newEtcdEnvServiceSetEtcdEnvArgs,
		newEtcdEnvServiceSetEtcdEnvResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CronJob": kitex.NewMethodInfo(
		cronJobHandler,
		newEtcdEnvServiceCronJobArgs,
		newEtcdEnvServiceCronJobResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	etcdEnvServiceServiceInfo                = NewServiceInfo()
	etcdEnvServiceServiceInfoForClient       = NewServiceInfoForClient()
	etcdEnvServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return etcdEnvServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return etcdEnvServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return etcdEnvServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "EtcdEnvService"
	handlerType := (*autoenv.EtcdEnvService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "autoenv",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func getEtcdEnvHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*autoenv.EtcdEnvServiceGetEtcdEnvArgs)
	realResult := result.(*autoenv.EtcdEnvServiceGetEtcdEnvResult)
	success, err := handler.(autoenv.EtcdEnvService).GetEtcdEnv(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEtcdEnvServiceGetEtcdEnvArgs() interface{} {
	return autoenv.NewEtcdEnvServiceGetEtcdEnvArgs()
}

func newEtcdEnvServiceGetEtcdEnvResult() interface{} {
	return autoenv.NewEtcdEnvServiceGetEtcdEnvResult()
}

func setEtcdEnvHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*autoenv.EtcdEnvServiceSetEtcdEnvArgs)
	realResult := result.(*autoenv.EtcdEnvServiceSetEtcdEnvResult)
	success, err := handler.(autoenv.EtcdEnvService).SetEtcdEnv(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEtcdEnvServiceSetEtcdEnvArgs() interface{} {
	return autoenv.NewEtcdEnvServiceSetEtcdEnvArgs()
}

func newEtcdEnvServiceSetEtcdEnvResult() interface{} {
	return autoenv.NewEtcdEnvServiceSetEtcdEnvResult()
}

func cronJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*autoenv.EtcdEnvServiceCronJobArgs)
	realResult := result.(*autoenv.EtcdEnvServiceCronJobResult)
	success, err := handler.(autoenv.EtcdEnvService).CronJob(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEtcdEnvServiceCronJobArgs() interface{} {
	return autoenv.NewEtcdEnvServiceCronJobArgs()
}

func newEtcdEnvServiceCronJobResult() interface{} {
	return autoenv.NewEtcdEnvServiceCronJobResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetEtcdEnv(ctx context.Context, req *autoenv.GetEtcdEnvReq) (r *autoenv.GetEtcdEnvResp, err error) {
	var _args autoenv.EtcdEnvServiceGetEtcdEnvArgs
	_args.Req = req
	var _result autoenv.EtcdEnvServiceGetEtcdEnvResult
	if err = p.c.Call(ctx, "GetEtcdEnv", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetEtcdEnv(ctx context.Context, req *autoenv.SetEtcdEnvReq) (r *autoenv.SetEtcdEnvResp, err error) {
	var _args autoenv.EtcdEnvServiceSetEtcdEnvArgs
	_args.Req = req
	var _result autoenv.EtcdEnvServiceSetEtcdEnvResult
	if err = p.c.Call(ctx, "SetEtcdEnv", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CronJob(ctx context.Context, req *autoenv.CronJobReq) (r *autoenv.CronJobResp, err error) {
	var _args autoenv.EtcdEnvServiceCronJobArgs
	_args.Req = req
	var _result autoenv.EtcdEnvServiceCronJobResult
	if err = p.c.Call(ctx, "CronJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
